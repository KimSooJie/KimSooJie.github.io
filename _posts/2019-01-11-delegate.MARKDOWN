---
layout: post
title: "Effective C# :: delegate callback"
date: 2019-01-11 12:44:41 +0900
categories: jekyll update
permalink: /:title
---
###### **빌 와그너 저/김명신 역,Effective C# (3판) 강력한 C#코드를 구현하는 50가지 전략과 기법 [eBook]** 스터디 요약 및 정리

- Action<T> // 반환값이 없는(void인) 델리게이트
- Func<T> // 반환값이 반드시 있는 델리게이트
- Predicate<T> // 반값이 bool 인 델리게이트 (Func<T,bool> 은 Predicate<T> 와 같다고 볼수있다.)

멀티캐스트 델리게이트는 한번호출하면 추가된 모든 함수가 호출된다. 주의할 점은 예외에 안전하지 않다는것과, 마지막으로 호출된 함수의 반환값이 델리게이트의 반환값으로 간주된다.

{% highlight ruby %}
  public void test_operation(Func<bool> pred)
  {
  	  foreach(ComplicatedClass c in container)
	  {
			c.DoOperation();

			// 사용자가 임의로 중단을 요청했는지 확인
			if(false == pred()) return;
	  }
  }
{% endhighlight %}

{% highlight ruby %}
  Func<bool> cp = () => check0();
  cp += () => check1();
  c.test_operation(cp);
{% endhighlight %}

이 메서드를 유니캐스트 델리게이트 형태(pred에 등록된 함수가 한 개) 로 사용하면 문제가 없지만, 멀티캐스트 델리게이트 형태(pred에 등록된 함수가 두개이상)
로 사용하면 문제가 발생한다. 멀티캐스트 체인에서 마지막으로 호출된 함수의 반환값이 함수의 반환값이 되며, 다른 반환값은 무시된다. (check0()은 무시된다.)
이러한 문제를 해결하려면, 델리게이트에 포함된 호출대상 콜백 함수들을 직접 다루면 된다.

{% highlight ruby %}
  public void test_operation(Func<bool> pred)
  {
	  bool check= true;

  	  foreach(ComplicatedClass c in container)
	  {
			c.DoOperation();

			foreach(Func<bool> pr in pred.GetInvocationList())
			{
				check &= pr();
			}

			// 사용자가 임의로 중단을 요청했는지 확인
			if(!check) return;
	  }
  }
{% endhighlight %}

